# ns-3 CI/CD script with the code-linting stage
#
# Contains jobs to check the ns-3 coding style and perform lint checking.

# TODO: clang-tidy step, too difficult at the moment

on:
  workflow_call:
    inputs:
      stage:
        description: "pre-build|code-linting"
        required: true
        type: string

jobs:
  # Clang-format
  check-style-clang-format:
    if: inputs.stage == 'pre-build'
    runs-on: ubuntu-latest
    container:
      image: ubuntu:rolling
    strategy:
      matrix:
        version: [14, 15, 16]
    timeout-minutes: 60
    steps:
      - name: "Install required system packages"
        run: >
          apt update &&
          DEBIAN_FRONTEND=noninteractive apt install -y 
          python3
          wget
          clang-format-${{ matrix.version }}
      # The following 2 steps are required...
      # Github workflows/actions are too limited >:(
      # They will be duplicated in all reusable workflows
      - name: "Retrieve action from repository"
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/checkout-ns3
          sparse-checkout-cone-mode: false
      - name: "Checkout this repository as ns-3 module"
        uses: ./.github/actions/checkout-ns3
      - name: "Check code style"
        run: python3 utils/check-style-clang-format.py --verbose .

  # Clang-tidy
  clang-tidy-16:
    if: ! always()
    runs-on: ubuntu-latest
    container:
      image: ubuntu:rolling
    timeout-minutes: 180
    continue-on-error: true
    env:
      MPI_CI: 1
      CLANG_TIDY_OUTPUT: clang-tidy-output.log
      FILES_CHANGED: git-diff-name-only.log
      REPO_URL: https://github.com/signetlabdei/lorawan.git
      DEFAULT_BRANCH: develop
    steps:
      - name: "Install required system packages"
        run: >
          apt update &&
          DEBIAN_FRONTEND=noninteractive apt install -y
          clang cmake
          clang-tidy clang-tidy-16
          python3 python3-pip
          libboost-all-dev libeigen3-dev libgtk-3-dev libopenmpi-dev libsqlite3-dev
          gsl-bin libgsl-dev libgsl27
          git ssh
          wget
      - name: "Install required python packages"
        run: pip3 install --break-system-packages cppyy
      # The following 2 steps are required...
      # Github workflows/actions are too limited >:(
      # They will be duplicated in all reusable workflows
      - name: "Retrieve action from repository"
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/checkout-ns3
          sparse-checkout-cone-mode: false
      - name: "Checkout this repository as ns-3 module"
        uses: ./.github/actions/checkout-ns3
      - name: "Configure ns-3 CMake"
        run: >
          ./ns3 configure -d debug
          --enable-clang-tidy
          --enable-examples --enable-tests --enable-asserts
          --enable-mpi --enable-python-bindings
          --enable-modules "lorawan;applications"
      - name: "Add upstream repo and get list of changed files"
        working-directory: ./src/lorawan
        run: >
          if (git remote | grep -qw upstream) ; then
          git remote remove upstream ;
          fi &&
          git remote add -t $DEFAULT_BRANCH --no-tags -f upstream $REPO_URL &&
          git diff --name-only upstream/$DEFAULT_BRANCH > $GITHUB_WORKSPACE/$FILES_CHANGED
      # Run clang-tidy-diff in the opposite cases of the if-else below.
      # File paths generated by git diff are relative to the working tree. Therefore, iregex should only contain paths relative to the working tree.
      # This runs if we are on a different branch from the default OR if .clang-tidy was modified
      - name: "Running clang-tidy-diff"
        run: >
          if !([[ $GITHUB_HEAD_REF == $GITHUB_REF_NAME ]] || (grep -q ".clang-tidy" $FILES_CHANGED)) ; then
          echo "Running clang-tidy-diff" ;
          git -C src/lorawan/ diff -U0 upstream/$DEFAULT_BRANCH 
          --src-prefix=a/src/lorawan/ --dst-prefix=b/src/lorawan/ |
          clang-tidy-diff-16.py -path cmake-cache/ -p1 -quiet -use-color
          -iregex "(contrib|examples|src|scratch|utils)\/.+\.(cpp|cc|cxx|c|h|hpp)"
          1> $CLANG_TIDY_OUTPUT
          2> /dev/null ;
          fi
      # Run full clang-tidy in the following cases: 1) default branch, 2) ".clang-tidy" file changed, 3) clang-tidy-diff had an error
      - name: "Running full clang-tidy"
        working-directory: ./src/lorawan
        run: >
          if [[ $GITHUB_HEAD_REF == $GITHUB_REF_NAME ]] || (grep -q ".clang-tidy" $FILES_CHANGED) || (egrep -q -A 3 "file not found \[clang-diagnostic-error\]" $CLANG_TIDY_OUTPUT) ; then
          echo "Running full clang-tidy" ;
          run-clang-tidy-16 -p cmake-cache/ -quiet
          1> $CLANG_TIDY_OUTPUT
          2> /dev/null ;
          fi
      - name: "Check job results"
        run: >
          (! egrep -A 3 "error:|warning:|note:" $CLANG_TIDY_OUTPUT)
          echo "No clang-tidy errors found"
      - name: "Upload build artifacts"
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ CLANG_TIDY_OUTPUT }}
          path: ${{ CLANG_TIDY_OUTPUT }}

  # Emacs line
  emacs-line:
    if: inputs.stage == 'pre-build'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - run: >
          if ( egrep -rn --include="*.h" --include="*.cc" --include="*.c" --include="*.py" --include="*.rst" "c-file-style:|py-indent-offset:" ) ; then
          echo "Found Emacs lines on the above C/C++, Python and RST files" ;
          exit 1 ;
          else
          echo "No Emacs lines found on C/C++, Python and RST files" ;
          exit 0 ;
          fi

  # Spell checking
  spell-check:
    if: inputs.stage == 'pre-build'
    runs-on: ubuntu-latest
    container:
      image: python:latest
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - run: pip install codespell
      # Get commit messages
      - run: >
          if (git remote | grep -qw upstream) ; then
          git remote remove upstream ;
          fi
      - run: git config --global --add safe.directory $GITHUB_WORKSPACE
      # develop here is meant to be the "default branch"
      - run: git remote add -t develop --no-tags -f upstream https://github.com/signetlabdei/lorawan.git
      - run: git log --pretty=%B HEAD...upstream/develop ^upstream/develop > git_messages.txt
      # Check source code and commit messages
      - run: codespell -f -C0 ./
